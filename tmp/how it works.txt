How it works
============

This Jukebox system is a Python-based application designed to provide a seamless music playback experience, integrating with Home Assistant and custom hardware controls. Hereâ€™s a high-level overview of how it works:

1. **Core Components:**
	- **Media Player Logic:** The core playback and volume management is handled by the `JukeboxMediaPlayer` class, which interacts with Home Assistant and manages the current track, volume, and playback state.
	- **UI System:** The user interface is managed by the `ScreenManager` and a set of screen classes (e.g., IdleScreen, ErrorScreen). The UI responds to hardware events (rotary encoder, pushbutton, RFID) and system events.
	- **Event Bus:** An event bus pattern is used for decoupled communication between UI components and services. Events are published and subscribed to for actions like screen changes, error display, and playback control.
	- **Home Assistant Integration:** The system connects to Home Assistant via WebSocket, syncing playback state, volume, and track info.

2. **Error Handling:**
	- When a critical error occurs, the error screen is shown and all other UI updates are blocked until the user acknowledges the error (e.g., by pressing the rotary encoder button).

3. **Screen Redraws:**
	- The UI uses a `dirty` flag mechanism to determine when a screen needs to be redrawn. This ensures efficient updates and smooth transitions.

4. **Extensibility:**
	- The system is modular, with clear separation between hardware interfaces, UI logic, and service integrations. New features or hardware can be added by extending the relevant modules.

5. **Logging and Debugging:**
	- Extensive logging is used throughout the codebase to aid in debugging and monitoring system behavior.

For more details, see the code in the `app/` directory and the event bus documentation in the project notes.


Event Bus Events and Handlers
-----------------------------

| Event              | Handler (Class.Method)             | Purpose                                                      |
|--------------------|-----------------------------------|--------------------------------------------------------------|
| track_changed      | ScreenManager.handle_event         | Updates the UI to reflect a new track                        |
| volume_changed     | ScreenManager.handle_event         | Updates the UI to reflect a volume change                    |
| status_changed     | ScreenManager.handle_event         | Updates UI for player status                                 |
| show_rfid_reading  | ScreenManager.handle_event         | Shows the RFID reading screen                                |
| show_rfid_loading  | ScreenManager.handle_event         | Shows the RFID loading screen                                |
| show_rfid_new      | ScreenManager.handle_event         | Shows the new RFID screen                                    |
| show_rfid_error    | ScreenManager.handle_event         | Shows the RFID error screen                                  |
| clear_error        | ScreenManager.handle_event         | Clears error state                                           |
| button_pressed     | PlaybackManager.handle_event       | Handles playback controls and UI actions                     |
| RotaryEncoder      | PlaybackManager.handle_event       | Handles volume up/down                                       |
| ha_state_changed   | PlaybackManager.handle_event       | Handles Home Assistant state changes                         |
| ha_volume_changed  | PlaybackManager.handle_event       | Handles Home Assistant volume changes                        |
| rfid_read          | PlaybackManager.handle_event       | Handles RFID card reads                                      |